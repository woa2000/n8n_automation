{"createdAt":"2025-05-05T01:44:46.492Z","updatedAt":"2025-05-28T12:05:02.000Z","id":"2MqrPSkzXyIqeZs0","name":"Analisar Videos Youtube","active":false,"isArchived":false,"nodes":[{"parameters":{"model":"gpt-4o-2024-08-06","options":{}},"id":"27a53b13-92b1-4f86-81f8-cc449e122038","name":"OpenAI Chat Model","type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","position":[4160,720],"typeVersion":1},{"parameters":{"mode":"runOnceForEachItem","language":"python","pythonCode":"import cv2\nimport numpy as np\nimport base64\n\ndef extract_evenly_distributed_frames_from_base64(base64_string, max_frames=90):\n    # Decode the Base64 string into bytes\n    video_bytes = base64.b64decode(base64_string)\n    \n    # Write the bytes to a temporary file\n    video_path = '/tmp/temp_video.mp4'\n    with open(video_path, 'wb') as video_file:\n        video_file.write(video_bytes)\n    \n    # Open the video file using OpenCV\n    video_capture = cv2.VideoCapture(video_path)\n    \n    # Get the total number of frames in the video\n    total_frames = int(video_capture.get(cv2.CAP_PROP_FRAME_COUNT))\n    \n    # Calculate the step size to take 'max_frames' evenly distributed frames\n    step_size = max(1, total_frames // (max_frames - 1))\n    \n    # List to store selected frames as base64\n    selected_frames_base64 = []\n    \n    for i in range(0, total_frames, step_size):\n        # Set the current frame position\n        video_capture.set(cv2.CAP_PROP_POS_FRAMES, i)\n        \n        # Read the frame\n        ret, frame = video_capture.read()\n        if ret:\n            # Convert frame (NumPy array) to a Base64 string\n            frame_base64 = convert_frame_to_base64(frame)\n            selected_frames_base64.append(frame_base64)\n        if len(selected_frames_base64) >= max_frames:\n            break\n    \n    # Release the video capture object\n    video_capture.release()\n\n    return selected_frames_base64\n\ndef convert_frame_to_base64(frame):\n    # Convert the frame (NumPy array) to JPEG format\n    ret, buffer = cv2.imencode('.jpg', frame)\n    if not ret:\n        return None\n\n    # Encode JPEG image to Base64\n    frame_base64 = base64.b64encode(buffer).decode('utf-8')\n    return frame_base64\n\nbase64_video = _input.item.binary.data.data\nframes_base64 = extract_evenly_distributed_frames_from_base64(base64_video, max_frames=90)\n\nreturn { \"output\": frames_base64 }"},"id":"ea725a4e-d841-44e7-8629-90c80620a9ef","name":"Capture Frames","type":"n8n-nodes-base.code","position":[2920,520],"typeVersion":2},{"parameters":{"fieldToSplitOut":"output","options":{}},"id":"557aa2cd-57e4-44f4-aa18-23fe5f76c071","name":"Split Out Frames","type":"n8n-nodes-base.splitOut","position":[3120,520],"typeVersion":1},{"parameters":{"url":"=https://cdn.pixabay.com/video/2016/05/12/3175-166339863_small.mp4","options":{}},"id":"e2c2eaad-7b79-4f6c-a79b-59124e40df09","name":"Download Video","type":"n8n-nodes-base.httpRequest","position":[2540,420],"typeVersion":4.2},{"parameters":{"operation":"toBinary","sourceProperty":"output","options":{}},"id":"f40ee382-f78a-4196-b1be-06fb44241f0e","name":"Convert to Binary","type":"n8n-nodes-base.convertToFile","position":[3680,560],"typeVersion":1.1},{"parameters":{},"id":"2279885a-0ac4-41e3-b520-c917e5d241fd","name":"When clicking â€˜Test workflowâ€™","type":"n8n-nodes-base.manualTrigger","position":[2360,420],"typeVersion":1},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"id":"676c4a7c-d479-4e28-b553-de29e50a29cd","name":"Combine Script","type":"n8n-nodes-base.aggregate","position":[4840,420],"typeVersion":1},{"parameters":{"name":"=narrating-video-using-vision-ai-{{ $now.format('yyyyMMddHHmmss') }}.mp3","driveId":{"__rl":true,"mode":"list","value":"My Drive","cachedResultUrl":"https://drive.google.com/drive/my-drive","cachedResultName":"My Drive"},"folderId":{"__rl":true,"mode":"id","value":"1dBJZL_SCh6F2U7N7kIMsnSiI4QFxn2xD"},"options":{}},"id":"054b7e2f-32d3-4195-8199-6e1eebac191f","name":"Upload to GDrive","type":"n8n-nodes-base.googleDrive","position":[5240,420],"typeVersion":3},{"parameters":{"content":"## Try It Out!\n\n### This n8n template takes a video and extracts frames from it which are used with a multimodal LLM to generate a script. The script is then passed to the same multimodal LLM to generate a voiceover clip.\n\nThis template was inspired by [Processing and narrating a video with GPT's visual capabilities and the TTS API](https://cookbook.openai.com/examples/gpt_with_vision_for_video_understanding)\n\n* Video is downloaded using the HTTP node.\n* Python code node is used to extract the frames using OpenCV.\n* Loop node is used o batch the frames for the LLM to generate partial scripts.\n* All partial scripts are combined to form the full script which is then sent to OpenAI to generate audio from it.\n* The finished voiceover clip is uploaded to Google Drive.\n\nSample the finished product here: https://drive.google.com/file/d/1-XCoii0leGB2MffBMPpCZoxboVyeyeIX/view?usp=sharing\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!","height":586.0597334122469,"width":476.34074202271484},"id":"5600e513-8361-4957-9629-4fbd1bbdbc9e","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[1760,60],"typeVersion":1},{"parameters":{"content":"## 1. Download Video\n[Learn more about the HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)\n\nIn this demonstration, we'll download a stock video from pixabay using the HTTP Request node. Feel free to use other sources but ensure they are in a format support by OpenCV ([See docs](https://docs.opencv.org/3.4/dd/d43/tutorial_py_video_display.html))","height":463.313953488372,"width":459.41860465116287,"color":7},"id":"82750385-1a6b-45ae-b2a8-a41fe75e2eed","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","position":[2260,180],"typeVersion":1},{"parameters":{"content":"## 2. Split Video into Frames\n[Learn more about the Code node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)\n\nWe need to think of videos are a sum of 2 parts; a visual track and an audio track. The visual track is technically just a collection of images displayed one after the other and are typically referred to as frames. When we want LLM to understand videos, most of the time we can do so by giving it a series of frames as images to process.\n\nHere, we use the Python Code node to extract the frames from the video using OpenCV, a computer vision library. For performance reasons, we'll also capture only a max of 90 frames from the video but ensure they are evenly distributed across the video. This step takes about 1-2 mins to complete on a 3mb video.","height":522.6860465116279,"width":605.2674418604653,"color":7},"id":"cd8c2252-31db-4204-a656-733ec4a66daf","name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","position":[2760,180],"typeVersion":1},{"parameters":{"content":"### ðŸš¨ PERFORMANCE WARNING!\nUsing large videos or capturing a large number of frames is really memory intensive and could crash your n8n instance. Be sure you have sufficient memory and to optimise the video beforehand! ","height":132.89534883720933,"width":418.11627906976724,"color":3},"id":"0e948083-463a-4328-a5f5-8399ef3ba1c6","name":"Sticky Note3","type":"n8n-nodes-base.stickyNote","position":[2760,720],"typeVersion":1},{"parameters":{"content":"## 3. Use Vision AI to Narrate on Batches of Frames\n[Read more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\nTo keep within token limits of our LLM, we'll need to send our frames in sequential batches to represent chunks of our original video. We'll use the loop node to create batches of 15 frames - this is because of our max of 90 frames, this fits perfectly for a total of 6 loops. Next, we'll convert each frame to a binary image so we can resize for and attach to the Basic LLM node. One trick to point out is that within the Basic LLM node, previous iterations of the generation are prepended to form a cohesive script. Without, the LLM will assume it needs to start fresh for each batch of frames.\n\nA wait node is used to stay within service rate limits. This is useful for new users who are still on lower tiers. If you do not have such restrictions, feel free to remove this wait node!","height":774.3720930232558,"width":1264.8139534883715,"color":7},"id":"3a43d695-4210-417c-acbc-72c446052a91","name":"Sticky Note4","type":"n8n-nodes-base.stickyNote","position":[3400,180],"typeVersion":1},{"parameters":{},"id":"fc569335-f1b8-4247-95c7-c21d6c681419","name":"Stay Within Service Limits","type":"n8n-nodes-base.wait","position":[4480,700],"webhookId":"677fa706-b4dd-4fe3-ba17-feea944c3193","typeVersion":1.1},{"parameters":{"batchSize":15,"options":{}},"id":"fecfda01-12ec-43f6-90e7-faf7f50bc42a","name":"For Every 15 Frames","type":"n8n-nodes-base.splitInBatches","position":[3520,440],"typeVersion":3},{"parameters":{"operation":"resize","width":768,"height":768,"options":{"format":"jpeg"}},"id":"46f2e239-92f7-4c2e-a0d6-1233a0d7f9d1","name":"Resize Frame","type":"n8n-nodes-base.editImage","position":[3840,560],"typeVersion":1},{"parameters":{"aggregate":"aggregateAllItemData","options":{"includeBinaries":true}},"id":"adf65915-c4b8-44fd-a608-7828f43063e2","name":"Aggregate Frames","type":"n8n-nodes-base.aggregate","position":[4000,560],"typeVersion":1},{"parameters":{"content":"## 4. Generate Voice Over Clip Using TTS\n[Read more about the OpenAI node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai)\n\nFinally with our generated script parts, we can combine them into one and use OpenAI's Audio generation capabilities to generate a voice over from the full script. Once we have the output mp3, we can upload it to somewhere like Google Drive for later use.\n\nHave a listen to the finished product here: https://drive.google.com/file/d/1-XCoii0leGB2MffBMPpCZoxboVyeyeIX/view?usp=sharing","height":487.83720930232533,"width":769.1860465116274,"color":7},"id":"cfc2dbd6-da1a-4bde-90c3-6a5db4c82ec1","name":"Sticky Note5","type":"n8n-nodes-base.stickyNote","position":[4700,200],"typeVersion":1},{"parameters":{"resource":"audio","input":"={{ $json.data.map(item => item.text).join('\\n') }}","options":{"response_format":"mp3"}},"id":"bb85ac66-ff86-4725-8821-bb399a47f809","name":"Use Text-to-Speech","type":"@n8n/n8n-nodes-langchain.openAi","position":[5040,420],"typeVersion":1.5},{"parameters":{"content":"**The video used in this demonstration is**\n&copy; [Coverr-Free-Footage](https://pixabay.com/users/coverr-free-footage-1281706/) via [Pixabay](https://pixabay.com/videos/india-street-busy-rickshaw-people-3175/)\n![](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/jhx2tma2gxaabkeiqlgp#full-width)","height":296.8139534883723,"width":458.1279069767452,"color":7},"id":"7c3a8f57-bbfe-484b-a6d0-437f44574983","name":"Sticky Note6","type":"n8n-nodes-base.stickyNote","position":[2280,660],"typeVersion":1},{"parameters":{"promptType":"define","text":"=These are frames of a video. Create a short voiceover script in the style of David Attenborough. Only include the narration.\n{{\n$('Generate Narration Script').isExecuted\n ? `Continue from this script:\\n${$('Generate Narration Script').all().map(item => item.json.text.replace(/\\n/g,'')).join('\\n')}`\n : ''\n}}","messages":{"messageValues":[{"type":"HumanMessagePromptTemplate","messageType":"imageBinary"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_1"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_2"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_3"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_4"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_5"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_6"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_7"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_8"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_9"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_10"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_11"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_12"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_13"},{"type":"HumanMessagePromptTemplate","messageType":"imageBinary","binaryImageDataKey":"data_14"}]}},"id":"3c57ef0a-978d-4f1f-bb5e-9b701027b8e5","name":"Generate Narration Script","type":"@n8n/n8n-nodes-langchain.chainLlm","position":[4160,560],"typeVersion":1.4}],"connections":{"Resize Frame":{"main":[[{"node":"Aggregate Frames","type":"main","index":0}]]},"Capture Frames":{"main":[[{"node":"Split Out Frames","type":"main","index":0}]]},"Combine Script":{"main":[[{"node":"Use Text-to-Speech","type":"main","index":0}]]},"Download Video":{"main":[[{"node":"Capture Frames","type":"main","index":0}]]},"Aggregate Frames":{"main":[[{"node":"Generate Narration Script","type":"main","index":0}]]},"Split Out Frames":{"main":[[{"node":"For Every 15 Frames","type":"main","index":0}]]},"Convert to Binary":{"main":[[{"node":"Resize Frame","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"Generate Narration Script","type":"ai_languageModel","index":0}]]},"Use Text-to-Speech":{"main":[[{"node":"Upload to GDrive","type":"main","index":0}]]},"For Every 15 Frames":{"main":[[{"node":"Combine Script","type":"main","index":0}],[{"node":"Convert to Binary","type":"main","index":0}]]},"Generate Narration Script":{"main":[[{"node":"Stay Within Service Limits","type":"main","index":0}]]},"Stay Within Service Limits":{"main":[[{"node":"For Every 15 Frames","type":"main","index":0}]]},"When clicking â€˜Test workflowâ€™":{"main":[[{"node":"Download Video","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"014b7f87-c11c-433b-a5d5-acd3e423664d","triggerCount":0,"shared":[{"createdAt":"2025-05-05T01:44:46.496Z","updatedAt":"2025-05-05T01:44:46.496Z","role":"workflow:owner","workflowId":"2MqrPSkzXyIqeZs0","projectId":"5dTxE8vBWJ6kQMrp"}],"tags":[]}